// Enhanced Analytics Section - Auto-generated by analytics-setup.sh
import React, { useState, useMemo } from 'react'
import {
  NewspaperIcon,
  FireIcon,
  ClockIcon,
  ChartBarIcon,
  ArrowTrendingUpIcon,
  GlobeAltIcon,
  EyeIcon,
  CalendarIcon,
  TagIcon,
  TrophyIcon,
  SparklesIcon
} from '@heroicons/react/24/outline'

const EnhancedAnalyticsSection = ({ currentColors, allFeeds, recentSearches }) => {
  const [selectedTimeRange, setSelectedTimeRange] = useState('7d')
  const [selectedMetric, setSelectedMetric] = useState('overview')

  // Enhanced analytics calculations
  const analytics = useMemo(() => {
    const now = new Date()
    const timeRanges = {
      '1d': new Date(now.getTime() - 24 * 60 * 60 * 1000),
      '7d': new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),
      '30d': new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000)
    }
    
    const selectedRange = timeRanges[selectedTimeRange]

    // Basic counts
    const total = allFeeds.length
    const todayArticles = allFeeds.filter(article => 
      new Date(article.pubDate) > timeRanges['1d']
    ).length
    const rangeArticles = allFeeds.filter(article => 
      new Date(article.pubDate) > selectedRange
    ).length

    // Category analysis
    const categoryStats = {}
    const sourceStats = {}
    const hourlyActivity = Array(24).fill(0)
    const dailyActivity = Array(7).fill(0)
    const keywordFrequency = {}

    allFeeds.forEach(article => {
      const articleDate = new Date(article.pubDate)
      
      // Category distribution
      const category = article.category || 'general'
      if (!categoryStats[category]) {
        categoryStats[category] = { count: 0, recent: 0, trending: 0 }
      }
      categoryStats[category].count++
      
      if (articleDate > selectedRange) {
        categoryStats[category].recent++
      }
      if (articleDate > timeRanges['1d']) {
        categoryStats[category].trending++
      }

      // Source analysis
      if (!sourceStats[article.source]) {
        sourceStats[article.source] = { 
          count: 0, 
          recent: 0, 
          categories: new Set(),
          avgLength: 0,
          totalLength: 0
        }
      }
      sourceStats[article.source].count++
      sourceStats[article.source].categories.add(category)
      sourceStats[article.source].totalLength += (article.title?.length || 0)
      sourceStats[article.source].avgLength = 
        sourceStats[article.source].totalLength / sourceStats[article.source].count

      if (articleDate > selectedRange) {
        sourceStats[article.source].recent++
      }

      // Time-based activity
      if (articleDate > timeRanges['7d']) {
        const hour = articleDate.getHours()
        const dayOfWeek = articleDate.getDay()
        hourlyActivity[hour]++
        dailyActivity[dayOfWeek]++
      }

      // Keyword extraction
      const words = article.title?.toLowerCase().split(/\s+/) || []
      words.forEach(word => {
        if (word.length > 3 && !['the', 'and', 'for', 'are', 'but', 'not', 'you', 'all', 'can', 'had', 'her', 'was', 'one', 'our', 'out', 'day', 'get', 'has', 'him', 'his', 'how', 'man', 'new', 'now', 'old', 'see', 'two', 'way', 'who', 'boy', 'did', 'its', 'let', 'put', 'say', 'she', 'too', 'use'].includes(word)) {
          keywordFrequency[word] = (keywordFrequency[word] || 0) + 1
        }
      })
    })

    // Calculate trending metrics
    const categoryTrends = Object.entries(categoryStats).map(([category, stats]) => ({
      category,
      ...stats,
      trendScore: stats.trending > 0 ? (stats.trending / stats.count) * 100 : 0,
      growth: stats.recent > 0 ? ((stats.trending - (stats.recent - stats.trending)) / Math.max(stats.recent - stats.trending, 1)) * 100 : 0
    })).sort((a, b) => b.trendScore - a.trendScore)

    const sourceTrends = Object.entries(sourceStats).map(([source, stats]) => ({
      source,
      ...stats,
      diversity: stats.categories.size,
      efficiency: stats.recent / Math.max(stats.count, 1),
      categories: Array.from(stats.categories)
    })).sort((a, b) => b.recent - a.recent)

    // Top keywords
    const topKeywords = Object.entries(keywordFrequency)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 15)

    // Activity insights
    const peakHour = hourlyActivity.indexOf(Math.max(...hourlyActivity))
    const peakDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][
      dailyActivity.indexOf(Math.max(...dailyActivity))
    ]

    // Engagement metrics
    const avgTitleLength = allFeeds.reduce((sum, article) => 
      sum + (article.title?.length || 0), 0) / allFeeds.length
    
    const imagesCount = allFeeds.filter(article => article.image).length
    const imageRate = (imagesCount / total * 100)

    return {
      total,
      todayArticles,
      rangeArticles,
      categoryTrends,
      sourceTrends,
      topKeywords,
      hourlyActivity,
      dailyActivity,
      peakHour,
      peakDay,
      avgTitleLength,
      imageRate,
      searchData: {
        totalSearches: recentSearches.length,
        uniqueTerms: new Set(recentSearches).size,
        avgLength: recentSearches.reduce((sum, term) => sum + term.length, 0) / Math.max(recentSearches.length, 1)
      }
    }
  }, [allFeeds, selectedTimeRange, recentSearches])

  const timeRangeOptions = [
    { value: '1d', label: '24h' },
    { value: '7d', label: '7d' },
    { value: '30d', label: '30d' }
  ]

  const metricOptions = [
    { value: 'overview', label: 'Overview', icon: ChartBarIcon },
    { value: 'sources', label: 'Sources', icon: NewspaperIcon },
    { value: 'trends', label: 'Trends', icon: ArrowTrendingUpIcon },
    { value: 'activity', label: 'Activity', icon: ClockIcon }
  ]

  const formatNumber = (num) => {
    if (num >= 1000) return `${(num / 1000).toFixed(1)}k`
    return num.toString()
  }

  return (
    <div className="p-4 space-y-6">
      {/* Header with time range selector */}
      <div className="flex justify-between items-center">
        <h2 className={`text-xl font-bold ${currentColors.text} flex items-center`}>
          <SparklesIcon className="w-6 h-6 mr-2 text-purple-500" />
          News Analytics
        </h2>
        <div className="flex space-x-2">
          {timeRangeOptions.map(option => (
            <button
              key={option.value}
              onClick={() => setSelectedTimeRange(option.value)}
              className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all ${
                selectedTimeRange === option.value
                  ? 'bg-blue-500 text-white shadow-lg'
                  : `${currentColors.categoryButton} hover:scale-105`
              }`}
            >
              {option.label}
            </button>
          ))}
        </div>
      </div>

      {/* Metric selector */}
      <div className="flex space-x-2 overflow-x-auto pb-2">
        {metricOptions.map(option => {
          const IconComponent = option.icon
          return (
            <button
              key={option.value}
              onClick={() => setSelectedMetric(option.value)}
              className={`flex items-center px-4 py-2 rounded-xl text-sm font-medium whitespace-nowrap transition-all ${
                selectedMetric === option.value
                  ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                  : `${currentColors.categoryButton} hover:scale-105`
              }`}
            >
              <IconComponent className="w-4 h-4 mr-2" />
              {option.label}
            </button>
          )
        })}
      </div>

      {/* Overview Section */}
      {selectedMetric === 'overview' && (
        <div className="space-y-4">
          {/* Key Stats Grid */}
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
            <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4 hover:shadow-lg transition-all`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className={`text-2xl font-bold ${currentColors.text}`}>
                    {formatNumber(analytics.total)}
                  </p>
                  <p className={`text-sm ${currentColors.textMuted}`}>Total Articles</p>
                  <div className="flex items-center mt-1">
                    <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                    <span className="text-xs text-green-600">+{analytics.todayArticles} today</span>
                  </div>
                </div>
                <NewspaperIcon className={`w-8 h-8 ${currentColors.textMuted}`} />
              </div>
            </div>

            <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4 hover:shadow-lg transition-all`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className={`text-2xl font-bold text-orange-600`}>
                    {analytics.todayArticles}
                  </p>
                  <p className={`text-sm ${currentColors.textMuted}`}>Today</p>
                  <div className="flex items-center mt-1">
                    <FireIcon className="w-3 h-3 text-orange-500 mr-1" />
                    <span className="text-xs text-orange-600">Active</span>
                  </div>
                </div>
                <FireIcon className="w-8 h-8 text-orange-500" />
              </div>
            </div>

            <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4 hover:shadow-lg transition-all`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className={`text-2xl font-bold text-blue-600`}>
                    {analytics.sourceTrends.length}
                  </p>
                  <p className={`text-sm ${currentColors.textMuted}`}>Sources</p>
                  <div className="flex items-center mt-1">
                    <GlobeAltIcon className="w-3 h-3 text-blue-500 mr-1" />
                    <span className="text-xs text-blue-600">Active</span>
                  </div>
                </div>
                <GlobeAltIcon className="w-8 h-8 text-blue-500" />
              </div>
            </div>

            <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4 hover:shadow-lg transition-all`}>
              <div className="flex items-center justify-between">
                <div>
                  <p className={`text-2xl font-bold text-purple-600`}>
                    {analytics.imageRate.toFixed(0)}%
                  </p>
                  <p className={`text-sm ${currentColors.textMuted}`}>With Images</p>
                  <div className="flex items-center mt-1">
                    <EyeIcon className="w-3 h-3 text-purple-500 mr-1" />
                    <span className="text-xs text-purple-600">Visual</span>
                  </div>
                </div>
                <EyeIcon className="w-8 h-8 text-purple-500" />
              </div>
            </div>
          </div>

          {/* Quick Insights */}
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-3 flex items-center`}>
              <TrophyIcon className="w-5 h-5 mr-2 text-yellow-500" />
              Quick Insights
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <ClockIcon className="w-4 h-4 mr-2 text-blue-500" />
                  <span>Peak activity: {analytics.peakHour}:00 - {analytics.peakHour + 1}:00</span>
                </div>
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <CalendarIcon className="w-4 h-4 mr-2 text-green-500" />
                  <span>Most active day: {analytics.peakDay}</span>
                </div>
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <TagIcon className="w-4 h-4 mr-2 text-purple-500" />
                  <span>Avg title length: {Math.round(analytics.avgTitleLength)} chars</span>
                </div>
              </div>
              <div className="space-y-2">
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <ArrowTrendingUpIcon className="w-4 h-4 mr-2 text-orange-500" />
                  <span>Top category: {analytics.categoryTrends[0]?.category || 'N/A'}</span>
                </div>
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <NewspaperIcon className="w-4 h-4 mr-2 text-blue-500" />
                  <span>Top source: {analytics.sourceTrends[0]?.source || 'N/A'}</span>
                </div>
                <div className={`flex items-center text-sm ${currentColors.text}`}>
                  <EyeIcon className="w-4 h-4 mr-2 text-green-500" />
                  <span>Search terms: {analytics.searchData.uniqueTerms}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Sources Section */}
      {selectedMetric === 'sources' && (
        <div className="space-y-4">
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-4 flex items-center`}>
              <NewspaperIcon className="w-5 h-5 mr-2" />
              Source Performance ({selectedTimeRange})
            </h3>
            <div className="space-y-3">
              {analytics.sourceTrends.slice(0, 8).map((source, index) => (
                <div key={source.source} className="flex items-center justify-between p-3 rounded-lg bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700">
                  <div className="flex items-center flex-1">
                    <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold mr-3 ${
                      index === 0 ? 'bg-gradient-to-r from-yellow-400 to-orange-500' :
                      index === 1 ? 'bg-gradient-to-r from-gray-400 to-gray-600' :
                      index === 2 ? 'bg-gradient-to-r from-orange-400 to-red-500' :
                      'bg-gradient-to-r from-blue-500 to-purple-500'
                    }`}>
                      {index + 1}
                    </div>
                    <div className="flex-1">
                      <div className={`font-medium ${currentColors.text}`}>{source.source}</div>
                      <div className="flex items-center space-x-3 text-sm">
                        <span className={`${currentColors.textMuted}`}>{source.recent} articles</span>
                        <span className="text-blue-600">{source.diversity} categories</span>
                        <span className="text-green-600">{Math.round(source.avgLength)} chars avg</span>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`text-lg font-bold ${currentColors.text}`}>{source.count}</div>
                    <div className="text-xs text-gray-500">total</div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Trends Section */}
      {selectedMetric === 'trends' && (
        <div className="space-y-4">
          {/* Category Trends */}
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-4 flex items-center`}>
              <ArrowTrendingUpIcon className="w-5 h-5 mr-2" />
              Trending Categories
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {analytics.categoryTrends.slice(0, 6).map((category) => (
                <div key={category.category} className="flex items-center justify-between p-3 rounded-lg border border-gray-200 dark:border-gray-600">
                  <div className="flex items-center">
                    <div className={`w-3 h-3 rounded-full mr-3 ${
                      category.growth > 0 ? 'bg-green-500' : 
                      category.growth < 0 ? 'bg-red-500' : 'bg-gray-400'
                    }`}></div>
                    <div>
                      <div className={`font-medium ${currentColors.text} capitalize`}>{category.category}</div>
                      <div className="text-xs text-gray-500">{category.recent} recent</div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className={`text-sm font-bold ${category.growth > 0 ? 'text-green-600' : category.growth < 0 ? 'text-red-600' : 'text-gray-500'}`}>
                      {category.growth > 0 ? '+' : ''}{category.growth.toFixed(1)}%
                    </div>
                    <div className="text-xs text-gray-500">{category.count} total</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Top Keywords */}
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-4 flex items-center`}>
              <TagIcon className="w-5 h-5 mr-2" />
              Trending Keywords
            </h3>
            <div className="flex flex-wrap gap-2">
              {analytics.topKeywords.slice(0, 20).map(([keyword, count], index) => (
                <span
                  key={keyword}
                  className={`px-3 py-2 rounded-full text-sm font-medium transition-all hover:scale-105 cursor-pointer ${
                    index < 3 ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white' :
                    index < 8 ? 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200' :
                    'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300'
                  }`}
                  style={{
                    fontSize: `${Math.max(0.75, Math.min(1.1, count / 10))}rem`
                  }}
                >
                  {keyword}
                  <span className="ml-1 text-xs opacity-75">({count})</span>
                </span>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Activity Section */}
      {selectedMetric === 'activity' && (
        <div className="space-y-4">
          {/* Hourly Activity */}
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-4 flex items-center`}>
              <ClockIcon className="w-5 h-5 mr-2" />
              Hourly Activity (Last 7 days)
            </h3>
            <div className="flex items-end space-x-1 h-24">
              {analytics.hourlyActivity.map((count, hour) => {
                const maxCount = Math.max(...analytics.hourlyActivity)
                const height = maxCount > 0 ? (count / maxCount) * 100 : 0
                return (
                  <div key={hour} className="flex-1 flex flex-col items-center">
                    <div 
                      className="bg-gradient-to-t from-blue-500 to-blue-300 rounded-t min-h-[2px] w-full"
                      style={{ height: `${height}%` }}
                      title={`${hour}:00 - ${count} articles`}
                    ></div>
                    <span className="text-xs text-gray-500 mt-1">{hour}</span>
                  </div>
                )
              })}
            </div>
            <div className="flex justify-between text-xs text-gray-500 mt-2">
              <span>00:00</span>
              <span>06:00</span>
              <span>12:00</span>
              <span>18:00</span>
              <span>23:59</span>
            </div>
          </div>

          {/* Search Analytics */}
          <div className={`${currentColors.cardBg} ${currentColors.border} border rounded-xl p-4`}>
            <h3 className={`text-lg font-semibold ${currentColors.text} mb-4 flex items-center`}>
              <ChartBarIcon className="w-5 h-5 mr-2" />
              Search Analytics
            </h3>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center">
                <div className={`text-2xl font-bold ${currentColors.text}`}>
                  {analytics.searchData.totalSearches}
                </div>
                <div className={`text-sm ${currentColors.textMuted}`}>Total Searches</div>
              </div>
              <div className="text-center">
                <div className={`text-2xl font-bold text-blue-600`}>
                  {analytics.searchData.uniqueTerms}
                </div>
                <div className={`text-sm ${currentColors.textMuted}`}>Unique Terms</div>
              </div>
              <div className="text-center">
                <div className={`text-2xl font-bold text-green-600`}>
                  {Math.round(analytics.searchData.avgLength)}
                </div>
                <div className={`text-sm ${currentColors.textMuted}`}>Avg Length</div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default EnhancedAnalyticsSection
