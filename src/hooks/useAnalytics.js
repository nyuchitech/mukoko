// Analytics tracking hook - Auto-generated by analytics-setup.sh
import { useCallback, useMemo } from 'react'

// User ID management
function generateUserId() {
  const stored = localStorage.getItem('harare_metro_user_id')
  if (stored) return stored
  
  const newId = 'user_' + Date.now() + '_' + Math.random().toString(36).substring(2)
  localStorage.setItem('harare_metro_user_id', newId)
  return newId
}

export function useAnalytics() {
  const userId = useMemo(() => generateUserId(), [])

  // Core analytics tracking function
  const trackEvent = useCallback(async (eventType, data = {}) => {
    try {
      const payload = {
        eventType: eventType,
        userId: userId,
        timestamp: Date.now(),
        data: {
          url: window.location.href,
          userAgent: navigator.userAgent.substring(0, 100),
          ...data
        }
      }

      const response = await fetch('/api/analytics/track', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-User-ID': userId
        },
        body: JSON.stringify(payload)
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }

      console.log('ðŸ“Š Analytics tracked:', eventType)
    } catch (error) {
      console.log('Analytics failed, using localStorage:', error.message)
      
      // Fallback to localStorage
      try {
        const events = JSON.parse(localStorage.getItem('harare_metro_analytics') || '[]')
        events.push({ eventType, data, timestamp: Date.now(), userId })
        localStorage.setItem('harare_metro_analytics', JSON.stringify(events.slice(-100)))
      } catch (e) {
        // Silent failure
      }
    }
  }, [userId])

  // USER INTERACTIONS -> news_interactions table
  const trackUserInteraction = useCallback(async (interactionType, article, state) => {
    await trackEvent('user_interaction', {
      type: interactionType,
      articleId: (article.id || article.link || '').substring(0, 100),
      articleTitle: (article.title || '').substring(0, 200),
      source: (article.source || '').substring(0, 50),
      category: (article.category || '').substring(0, 50),
      state: !!state
    })
  }, [trackEvent])

  const trackArticleClick = useCallback(async (article) => {
    await trackEvent('article_click', {
      articleId: (article.id || article.link || '').substring(0, 100),
      source: (article.source || '').substring(0, 50),
      category: (article.category || '').substring(0, 50),
      title: (article.title || '').substring(0, 200)
    })
  }, [trackEvent])

  const trackArticleView = useCallback(async (article) => {
    await trackEvent('article_view', {
      articleId: (article.id || article.link || '').substring(0, 100),
      source: (article.source || '').substring(0, 50),
      category: (article.category || '').substring(0, 50),
      title: (article.title || '').substring(0, 200)
    })
  }, [trackEvent])

  const trackPageView = useCallback(async (page, referrer = '') => {
    await trackEvent('page_view', {
      page: page,
      referrer: referrer
    })
  }, [trackEvent])

  const trackScroll = useCallback(async (direction, position) => {
    await trackEvent('infinite_scroll', {
      direction: direction,
      scrollPosition: position,
      page: 'feeds'
    })
  }, [trackEvent])

  const trackRefresh = useCallback(async (type = 'manual') => {
    await trackEvent('refresh_triggered', {
      type: type,
      source: 'user_action'
    })
  }, [trackEvent])

  // CATEGORY INTERACTIONS -> category_clicks table
  const trackCategoryClick = useCallback(async (category, source = 'filter') => {
    await trackEvent('category_click', {
      category: category,
      source: source
    })
  }, [trackEvent])

  const trackFilterChange = useCallback(async (filterType, filterValue, resultCount = 0) => {
    await trackEvent('filter_change', {
      filterType: filterType,
      filterValue: filterValue,
      resultCount: resultCount
    })
  }, [trackEvent])

  // SEARCH & FEED ANALYTICS -> search_queries table
  const trackSearch = useCallback(async (query, category = 'all', resultCount = 0) => {
    await trackEvent('search_performed', {
      searchQuery: query.substring(0, 100),
      selectedCategory: category,
      resultCount: resultCount
    })
  }, [trackEvent])

  const trackFeedAnalytics = useCallback(async (analyticsData) => {
    await trackEvent('feed_analytics', {
      searchQuery: (analyticsData.searchQuery || '').substring(0, 100),
      selectedCategory: (analyticsData.selectedCategory || 'all').substring(0, 50),
      resultCount: Number(analyticsData.resultCount) || 0,
      loadTime: analyticsData.loadTime || 0
    })
  }, [trackEvent])

  const trackFeedLoad = useCallback(async (params) => {
    await trackEvent('feed_load', {
      category: params.category || 'all',
      searchQuery: (params.searchQuery || '').substring(0, 100),
      sortBy: params.sortBy || 'newest',
      timeframe: params.timeframe || 'all',
      resultCount: params.resultCount || 0,
      loadTime: params.loadTime || 0
    })
  }, [trackEvent])

  const trackError = useCallback(async (errorType, errorMessage, page = 'unknown') => {
    await trackEvent('error_occurred', {
      errorType: errorType,
      errorMessage: errorMessage.substring(0, 200),
      page: page
    })
  }, [trackEvent])

  // Batch send localStorage events
  const syncLocalAnalytics = useCallback(async () => {
    try {
      const events = JSON.parse(localStorage.getItem('harare_metro_analytics') || '[]')
      if (events.length === 0) return

      // Send events one by one (to avoid overwhelming the server)
      let successCount = 0
      for (const event of events.slice(0, 10)) { // Process max 10 at a time
        try {
          await trackEvent(event.eventType, event.data)
          successCount++
        } catch (e) {
          break // Stop on first failure
        }
      }

      // Remove successfully sent events
      if (successCount > 0) {
        const remainingEvents = events.slice(successCount)
        localStorage.setItem('harare_metro_analytics', JSON.stringify(remainingEvents))
        console.log(`ðŸ“Š Synced ${successCount} analytics events`)
      }
    } catch (error) {
      console.log('Error syncing local analytics:', error.message)
    }
  }, [trackEvent])

  return {
    // Core
    trackEvent,
    userId,
    
    // User Interactions (-> news_interactions)
    trackUserInteraction,
    trackArticleClick,
    trackArticleView,
    trackPageView,
    trackScroll,
    trackRefresh,
    
    // Category Interactions (-> category_clicks)
    trackCategoryClick,
    trackFilterChange,
    
    // Search & Feed Analytics (-> search_queries)
    trackSearch,
    trackFeedAnalytics,
    trackFeedLoad,
    trackError,
    
    // Utilities
    syncLocalAnalytics
  }
}
